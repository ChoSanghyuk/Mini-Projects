package handler

import (
	"invest/model"

	mock "github.com/stretchr/testify/mock"
)

// MockAssetInfoSaver is an autogenerated mock type for the AssetInfoSaver type
type MockAssetInfoSaver struct {
	mock.Mock
}

// SaveAssetInfo provides a mock function with given fields: name, division, volatility, currency, peak, recentPeak, bottom
func (_m *MockAssetInfoSaver) SaveAssetInfo(name string, division string, volatility uint, currency string, peak float64, recentPeak float64, bottom float64) error {
	ret := _m.Called(name, division, volatility, currency, peak, recentPeak, bottom)

	if len(ret) == 0 {
		panic("no return value specified for SaveAssetInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, uint, string, float64, float64, float64) error); ok {
		r0 = rf(name, division, volatility, currency, peak, recentPeak, bottom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAssetInfoSaver creates a new instance of MockAssetInfoSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetInfoSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetInfoSaver {
	mock := &MockAssetInfoSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAssetRetriever is an autogenerated mock type for the AssetRetriever type
type MockAssetRetriever struct {
	mock.Mock
}

// RetrieveAssetHist provides a mock function with given fields: id
func (_m *MockAssetRetriever) RetrieveAssetHist(id uint) ([]model.InvestHistory, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAssetHist")
	}

	var r0 []model.InvestHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]model.InvestHistory, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []model.InvestHistory); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.InvestHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAssetInfo provides a mock function with given fields: id
func (_m *MockAssetRetriever) RetrieveAssetInfo(id uint) (*model.Asset, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAssetInfo")
	}

	var r0 *model.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.Asset, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Asset); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAssetList provides a mock function with given fields:
func (_m *MockAssetRetriever) RetrieveAssetList() ([]map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAssetList")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAssetRetriever creates a new instance of MockAssetRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssetRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssetRetriever {
	mock := &MockAssetRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFundRetriever is an autogenerated mock type for the FundRetriever type
type MockFundRetriever struct {
	mock.Mock
}

// RetreiveAssetOfFundById provides a mock function with given fields: id
func (_m *MockFundRetriever) RetreiveAssetOfFundById(id uint) (*model.Fund, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RetreiveAssetOfFundById")
	}

	var r0 *model.Fund
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.Fund, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Fund); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Fund)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetreiveInvestHistOfFund provides a mock function with given fields:
func (_m *MockFundRetriever) RetreiveInvestHistOfFund() ([]model.Fund, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RetreiveInvestHistOfFund")
	}

	var r0 []model.Fund
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Fund, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Fund); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Fund)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveFundAmount provides a mock function with given fields:
func (_m *MockFundRetriever) RetrieveFundAmount() ([]model.Fund, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RetrieveFundAmount")
	}

	var r0 []model.Fund
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Fund, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Fund); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Fund)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveFundHistById provides a mock function with given fields: id
func (_m *MockFundRetriever) RetrieveFundHistById(id uint) (*model.Fund, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveFundHistById")
	}

	var r0 *model.Fund
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.Fund, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Fund); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Fund)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFundRetriever creates a new instance of MockFundRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFundRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFundRetriever {
	mock := &MockFundRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInvestRetriever is an autogenerated mock type for the InvestRetriever type
type MockInvestRetriever struct {
	mock.Mock
}

// RetrieveInvestHist provides a mock function with given fields: fundId, assetId, start, end
func (_m *MockInvestRetriever) RetrieveInvestHist(fundId uint, assetId uint, start string, end string) ([]model.InvestHistory, error) {
	ret := _m.Called(fundId, assetId, start, end)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveInvestHist")
	}

	var r0 []model.InvestHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string, string) ([]model.InvestHistory, error)); ok {
		return rf(fundId, assetId, start, end)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string, string) []model.InvestHistory); ok {
		r0 = rf(fundId, assetId, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.InvestHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string, string) error); ok {
		r1 = rf(fundId, assetId, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockInvestRetriever creates a new instance of MockInvestRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvestRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvestRetriever {
	mock := &MockInvestRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInvestSaver is an autogenerated mock type for the InvestSaver type
type MockInvestSaver struct {
	mock.Mock
}

// SaveInvest provides a mock function with given fields: fundId, assetId, price, currency, count
func (_m *MockInvestSaver) SaveInvest(fundId uint, assetId uint, price float64, currency string, count uint) error {
	ret := _m.Called(fundId, assetId, price, currency, count)

	if len(ret) == 0 {
		panic("no return value specified for SaveInvest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, float64, string, uint) error); ok {
		r0 = rf(fundId, assetId, price, currency, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockInvestSaver creates a new instance of MockInvestSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvestSaver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvestSaver {
	mock := &MockInvestSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMaketRetriever is an autogenerated mock type for the MaketRetriever type
type MockMaketRetriever struct {
	mock.Mock
}

// RetrieveMarketSituation provides a mock function with given fields: date
func (_m *MockMaketRetriever) RetrieveMarketSituation(date string) (*model.Market, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveMarketSituation")
	}

	var r0 *model.Market
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Market, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Market); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Market)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockMaketRetriever creates a new instance of MockMaketRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMaketRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMaketRetriever {
	mock := &MockMaketRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
